// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwiftRideBookingBackend.Models;

#nullable disable

namespace SwiftRideBookingBackend.Migrations
{
    [DbContext(typeof(BookingContext))]
    partial class BookingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BoardingPoint", b =>
                {
                    b.Property<int>("BoardingPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardingPointId"));

                    b.Property<string>("Point")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("BoardingPointId");

                    b.HasIndex("RouteId");

                    b.ToTable("BoardingPoints");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int>("BoardingPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("DroppingPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JourneyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeatNumbers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("BoardingPointId");

                    b.HasIndex("BusId");

                    b.HasIndex("DroppingPointId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BookingHistory", b =>
                {
                    b.Property<int>("BookingHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingHistoryId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingHistoryId");

                    b.ToTable("BookingHistories");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<string>("BusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusOperatorId")
                        .HasColumnType("int");

                    b.Property<string>("BusType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("BusId");

                    b.HasIndex("BusOperatorId");

                    b.HasIndex("RouteId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusAmenity", b =>
                {
                    b.Property<int>("BusAmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusAmenityId"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.HasKey("BusAmenityId");

                    b.HasIndex("AmenityId");

                    b.HasIndex("BusId");

                    b.ToTable("BusAmenities");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusDeparture", b =>
                {
                    b.Property<int>("BusDepartureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusDepartureId"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BusDepartureId");

                    b.HasIndex("BusId");

                    b.ToTable("BusDepartures");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusOperator", b =>
                {
                    b.Property<int>("BusOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusOperatorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BusOperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("BusOperators");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusSeat", b =>
                {
                    b.Property<int>("BusSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusSeatId"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusSeatId");

                    b.HasIndex("BusId");

                    b.ToTable("BusSeats");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.DroppingPoint", b =>
                {
                    b.Property<int>("DroppingPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DroppingPointId"));

                    b.Property<string>("Point")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("DroppingPointId");

                    b.HasIndex("RouteId");

                    b.ToTable("DroppingPoints");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteId = 1,
                            Destination = "Coimbatore",
                            Origin = "Chennai"
                        },
                        new
                        {
                            RouteId = 2,
                            Destination = "Chennai",
                            Origin = "Madurai"
                        },
                        new
                        {
                            RouteId = 3,
                            Destination = "Madurai",
                            Origin = "Salem"
                        },
                        new
                        {
                            RouteId = 4,
                            Destination = "Trichy",
                            Origin = "Chennai"
                        },
                        new
                        {
                            RouteId = 5,
                            Destination = "Chennai",
                            Origin = "Erode"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BoardingPoint", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.Route", "Route")
                        .WithMany("BoardingPoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Booking", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.BoardingPoint", "BoardingPoint")
                        .WithMany()
                        .HasForeignKey("BoardingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SwiftRideBookingBackend.Models.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftRideBookingBackend.Models.DroppingPoint", "DroppingPoint")
                        .WithMany()
                        .HasForeignKey("DroppingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardingPoint");

                    b.Navigation("Bus");

                    b.Navigation("DroppingPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Bus", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.BusOperator", "BusOperator")
                        .WithMany()
                        .HasForeignKey("BusOperatorId");

                    b.HasOne("SwiftRideBookingBackend.Models.Route", "Route")
                        .WithMany("Buses")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusOperator");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusAmenity", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.Amenity", "Amenity")
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftRideBookingBackend.Models.Bus", "Bus")
                        .WithMany("BusAmenities")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusDeparture", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.Bus", "Bus")
                        .WithMany("Departures")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusOperator", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.BusSeat", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.Bus", "Bus")
                        .WithMany("Seats")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.DroppingPoint", b =>
                {
                    b.HasOne("SwiftRideBookingBackend.Models.Route", "Route")
                        .WithMany("DroppingPoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Bus", b =>
                {
                    b.Navigation("BusAmenities");

                    b.Navigation("Departures");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SwiftRideBookingBackend.Models.Route", b =>
                {
                    b.Navigation("BoardingPoints");

                    b.Navigation("Buses");

                    b.Navigation("DroppingPoints");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
